<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Sun Aug 16 12:42:22 EST 2009
  Author:  gstokol
  Purpose: Asynchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="ManageStock"
         targetNamespace="http://xmlns.oracle.com/Application1/OnlineStore/ManageStock"
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:client="http://xmlns.oracle.com/Application1/OnlineStore/ManageStock"
         xmlns:ora="http://schemas.oracle.com/xpath/extension"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:xpath20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ui="http://xmlns.oracle.com/soa/designer/"
         xmlns:task="http://xmlns.oracle.com/bpel/workflow/task"
         xmlns:taskservice="http://xmlns.oracle.com/bpel/workflow/taskService"
         xmlns:wfcommon="http://xmlns.oracle.com/bpel/workflow/common"
         xmlns:wf="http://schemas.oracle.com/bpel/extension/workflow"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:ns1="/onlinestoresdo/common/"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:ns2="http://www.example.org/ns/store"
         xmlns:ns3="/onlinestoresdo/common/types/"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:bpel2="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions" xmlns:ess="http://xmlns.oracle.com/scheduler">

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <bpelx:annotation>
        <bpelx:analysis>
            <bpelx:property name="wsdlFile">
                <![CDATA[ManageStock.wsdl]]>
            </bpelx:property>
        </bpelx:analysis>
    </bpelx:annotation>
    <partnerLinks>
        <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
        <partnerLink name="managestock_client" partnerLinkType="client:ManageStock" myRole="ManageStockProvider" partnerRole="ManageStockRequester"/>
        <partnerLink name="OnlineStoreService"
                     partnerRole="OnlineStoreService_Role"
                     partnerLinkType="ns1:OnlineStoreService_PL"/>
    </partnerLinks>

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        VARIABLES                                                        
        List of messages and XML documents used within this BPEL process 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <variables>
        <!-- Reference to the message passed as input during initiation -->
        <variable name="inputVariable" messageType="client:ManageStockRequestMessage"/>

        <!-- Reference to the message that will be sent back to the requester during callback -->
        <variable name="outputVariable" messageType="client:ManageStockResponseMessage"/>
        <variable name="reqOperation" type="xsd:string"/>
        <variable name="n" type="xsd:int"/>
    </variables>

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       ORCHESTRATION LOGIC                                               
       Set of activities coordinating the flow of messages across the    
       services integrated within this business process                  
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <sequence name="main">
        <!-- Receive input from requestor. (Note: This maps to operation defined in ManageStock.wsdl) -->

        <!-- 
          Asynchronous callback to the requester. (Note: the callback location and correlation id is transparently handled using WS-addressing.)
        -->
        <pick name="Pick_operation" createInstance="yes">
            <onMessage variable="inputVariable"
                       partnerLink="managestock_client"
                       portType="client:ManageStock" operation="checkStock">
                <assign name="Assign_checkstock">
                    <copy>
                        <from expression="'check'"/>
                        <to variable="reqOperation"/>
                    </copy>
                </assign>
            </onMessage>
            <onMessage variable="inputVariable"
                       partnerLink="managestock_client"
                       portType="client:ManageStock" operation="acquireStock">
                <bpelx:annotation>
                    <bpelx:pattern></bpelx:pattern>
                </bpelx:annotation>
                <assign name="Assign_acquirestock">
                    <copy>
                        <from expression="'acquire'"/>
                        <to variable="reqOperation"/>
                    </copy>
                </assign>
            </onMessage>
        </pick>
        <bpelx:flowN name="FlowN1"
                     N="count(bpws:getVariableData('inputVariable','payload','/ns2:StoreRequest/ns2:product'))"
                     indexVariable="n">
            <scope name="Scope_stockprocess">
                <variables>
                    <variable name="Invoke_checkstore_getOnlineStoreView1_InputVariable"
                              messageType="ns1:OnlineStoreService_getOnlineStoreView1"/>
                    <variable name="Invoke_checkstore_getOnlineStoreView1_OutputVariable"
                              messageType="ns1:OnlineStoreService_getOnlineStoreView1Response"/>
                    <variable name="Invoke_updstock_updateOnlineStoreView1_InputVariable"
                              messageType="ns1:OnlineStoreService_updateOnlineStoreView1"/>
                    <variable name="Invoke_updstock_updateOnlineStoreView1_OutputVariable"
                              messageType="ns1:OnlineStoreService_updateOnlineStoreView1Response"/>
                </variables>
                <sequence name="Sequence_4">
                    <assign name="Assign_prodid">
                        <copy>
                            <from variable="inputVariable" part="payload"
                                  query="/ns2:StoreRequest/ns2:product[position()=$n]/ns2:prodId"/>
                            <to variable="Invoke_checkstore_getOnlineStoreView1_InputVariable" part="parameters"
                                query="/ns3:getOnlineStoreView1/ns3:prodId"/>
                        </copy>
                    </assign>
                    <invoke name="Invoke_checkstore" inputVariable="Invoke_checkstore_getOnlineStoreView1_InputVariable"
                            outputVariable="Invoke_checkstore_getOnlineStoreView1_OutputVariable"
                            partnerLink="OnlineStoreService" portType="ns1:OnlineStoreService"
                            operation="getOnlineStoreView1"/>
                    <assign name="Assign_newqty">
                        <copy>
                            <from expression="bpws:getVariableData('Invoke_checkstore_getOnlineStoreView1_OutputVariable','parameters','/ns3:getOnlineStoreView1Response/ns3:result/ns1:Quantity') - bpws:getVariableData('inputVariable','payload','/ns2:StoreRequest/ns2:product[1]/ns2:qtyOrdered')"/>
                            <to variable="inputVariable" part="payload"
                                query="/ns2:StoreRequest/ns2:product[1]/ns2:qtyOrdered"/>
                        </copy>
                    </assign>
                    <switch name="Switch_acquirestock">
                        <case condition="bpws:getVariableData('reqOperation') = 'acquire'">
                            <bpelx:annotation>
                                <bpelx:pattern>Acquire Stock?</bpelx:pattern>
                            </bpelx:annotation>
                            <sequence name="Sequence_3">
                                <assign name="Assign_updstock_data">
                                    <copy>
                                        <from variable="inputVariable" part="payload"
                                              query="/ns2:StoreRequest/ns2:product[position()=$n]/ns2:prodId"/>
                                        <to variable="Invoke_updstock_updateOnlineStoreView1_InputVariable"
                                            part="parameters"
                                            query="/ns3:updateOnlineStoreView1/ns3:onlineStoreView1/ns1:ProdId"/>
                                    </copy>
                                    <copy>
                                        <from variable="inputVariable" part="payload"
                                              query="/ns2:StoreRequest/ns2:product[position()=$n]/ns2:qtyOrdered"/>
                                        <to variable="Invoke_updstock_updateOnlineStoreView1_InputVariable"
                                            part="parameters"
                                            query="/ns3:updateOnlineStoreView1/ns3:onlineStoreView1/ns1:Quantity"/>
                                    </copy>
                                </assign>
                                <invoke name="Invoke_updstock"
                                        inputVariable="Invoke_updstock_updateOnlineStoreView1_InputVariable"
                                        outputVariable="Invoke_updstock_updateOnlineStoreView1_OutputVariable"
                                        partnerLink="OnlineStoreService" portType="ns1:OnlineStoreService"
                                        operation="updateOnlineStoreView1"/>
                            </sequence>
                        </case>
                    </switch>
                </sequence>
            </scope>
        </bpelx:flowN>
        <switch name="Switch_operation">
            <case condition="bpws:getVariableData('reqOperation') = 'check'">
                <bpelx:annotation>
                    <bpelx:pattern>operation=check?</bpelx:pattern>
                </bpelx:annotation>
                <sequence name="Sequence_1">
                    <switch name="Switch_stockqty">
                        <case condition="bpws:getVariableData('inputVariable','payload','/ns2:StoreRequest//ns2:product/ns2:qtyOrdered') &lt; 0">
                            <bpelx:annotation>
                                <bpelx:pattern>Any out of stock?</bpelx:pattern>
                            </bpelx:annotation>
                            <assign name="Assign_outofstock">
                                <copy>
                                    <from expression="'out-of-stock'"/>
                                    <to variable="outputVariable" part="payload"
                                        query="/ns2:StoreResponse/ns2:status"/>
                                </copy>
                            </assign>
                        </case>
                        <otherwise>
                            <assign name="Assign_instock">
                                <copy>
                                    <from expression="'in-stock'"/>
                                    <to variable="outputVariable" part="payload"
                                        query="/ns2:StoreResponse/ns2:status"/>
                                </copy>
                            </assign>
                        </otherwise>
                    </switch>
                    <invoke name="callbackClient"
                            partnerLink="managestock_client"
                            portType="client:ManageStockCallback"
                            operation="checkStockResponse"
                            inputVariable="outputVariable"/>
                </sequence>
            </case>
            <otherwise>
                <sequence name="Sequence_2">
                    <assign name="Assign_fulfilled">
                        <copy>
                            <from expression="'fulfilled'"/>
                            <to variable="outputVariable" part="payload"
                                query="/ns2:StoreResponse/ns2:status"/>
                        </copy>
                    </assign>
                    <invoke name="callbackClient_fulfilled"
                            inputVariable="outputVariable"
                            partnerLink="managestock_client"
                            portType="client:ManageStockCallback"
                            operation="acquireStockResponse"/>
                </sequence>
            </otherwise>
        </switch>
    </sequence>
</process>